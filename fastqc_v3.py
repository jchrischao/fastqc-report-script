import os
import pandas as pd
from termcolor import colored
import openpyxl
from openpyxl.styles import PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows

fastqc_path = "/Users/chrischao/FastQC/fastqc"
fastq_dir = "/Users/chrischao/Desktop/MiSeqResults/fastqc/fastqc_input"
output_dir = "/Users/chrischao/Desktop/MiSeqResults/fastqc/fastqc_output/"
report_dir = "/Users/chrischao/Desktop/MiSeqResults/fastqc/fastqc_reports"

for file in os.listdir(fastq_dir):
    if file.endswith(".fastq") or file.endswith(".fq"):
        print(f"Running FastQC on {file}...")
        command = f"{fastqc_path} {os.path.join(fastq_dir, file)} --outdir={output_dir} --extract"
        os.system(command)
    elif file.endswith(".fastq.gz") or file.endswith(".fq.gz"):
        print(f"Running FastQC on {file}...")
        command = f"gunzip {os.path.join(fastq_dir, file)}"
        os.system(command)
        command = f"{fastqc_path} {os.path.join(fastq_dir, file.replace('.gz', ''))} --outdir={output_dir} --extract"
        os.system(command)
    else:
        print(f"Skipping file {file}...")

# Remove the zip file generated by FastQC
for file in os.listdir(output_dir):
    if file.endswith(".zip"):
        os.remove(os.path.join(output_dir, file))

# Create a summary table from the summary.txt files
summary_data = []

for subdir in os.listdir(output_dir):
    subdir_path = os.path.join(output_dir, subdir)
    if os.path.isdir(subdir_path):
        summary_file_path = os.path.join(subdir_path, 'summary.txt')
        if os.path.exists(summary_file_path):
            with open(summary_file_path, 'r') as summary_file:
                sample_name = None
                sample_data = {}
                for line in summary_file:
                    status, header, name = line.strip().split('\t')
                    if not sample_name:
                        sample_name = name
                    sample_data[header] = status
                sample_data['Sample'] = sample_name
                summary_data.append(sample_data)

# Create a DataFrame from the summary_data
summary_df = pd.DataFrame(summary_data)
summary_df = summary_df.set_index('Sample')

# Extract the sample number and R value for sorting
summary_df['Sample_Number'] = summary_df.index.str.extract(r'_S(\d+)_', expand=False).astype(int)
summary_df['R_Value'] = summary_df.index.str.extract(r'_(R[12])_', expand=False)

# Sort the DataFrame by Sample_Number and R_Value
summary_df.sort_values(by=['Sample_Number', 'R_Value'], inplace=True)

# Remove the sorting columns
summary_df.drop(columns=['Sample_Number', 'R_Value'], inplace=True)

# Create an Excel workbook and add a worksheet
workbook = openpyxl.Workbook()
worksheet = workbook.active

# Define the cell fill colors
green_fill = PatternFill(start_color="90EE90", end_color="90EE90", fill_type="solid")
yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
red_fill = PatternFill(start_color="FF6347", end_color="FF6347", fill_type="solid")

# Write the DataFrame to the worksheet and apply cell highlighting
for r, row in enumerate(dataframe_to_rows(summary_df, index=True, header=True), start=1):
    for c, value in enumerate(row, start=1):
        cell = worksheet.cell(row=r + 1, column=c, value=value)  # Shift down the data by one row
        if cell.value == "PASS":
            cell.fill = green_fill
        elif cell.value == "FAIL":
            cell.fill = red_fill
        elif cell.value == "WARN":
            cell.fill = yellow_fill

# Merge cells in row 1 from A1 to L1 and apply styling
worksheet.merge_cells('A1:L1')
cell = worksheet['A1']
cell.value = 'NGS FastQC Summary Report'
cell.fill = PatternFill(start_color='00008B', end_color='00008B', fill_type='solid')
cell.font = openpyxl.styles.Font(color='FFFFFF', bold=True)
worksheet['A1'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center')

# Move "Sample" header up one row
worksheet['A2'] = worksheet['A3'].value
worksheet['A3'] = ''

# Delete row 3
worksheet.delete_rows(3)

# Highlight the header cells in row 2
for cell in worksheet[2]:
    cell.fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")

# Set the column width of column A to fit the sample name
for row in worksheet.iter_rows(min_row=2, max_col=1, max_row=worksheet.max_row):
    for cell in row:
        cell.alignment = openpyxl.styles.Alignment(wrap_text=True)
    column = row[0].column_letter
    worksheet.column_dimensions[column].width = len(max([cell.value for cell in row], key=len))

# Save the workbook to a file
workbook.save(os.path.join(report_dir, 'fastqc_summary_report.xlsx'))
